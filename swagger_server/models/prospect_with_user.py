# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server import util


class ProspectWithUser(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, id_number: str=None, state: int=None, company: str=None, user: User=None):  # noqa: E501
        """ProspectWithUser - a model defined in Swagger

        :param id: The id of this ProspectWithUser.  # noqa: E501
        :type id: int
        :param id_number: The id_number of this ProspectWithUser.  # noqa: E501
        :type id_number: str
        :param state: The state of this ProspectWithUser.  # noqa: E501
        :type state: int
        :param company: The company of this ProspectWithUser.  # noqa: E501
        :type company: str
        :param user: The user of this ProspectWithUser.  # noqa: E501
        :type user: User
        """
        self.swagger_types = {
            'id': int,
            'id_number': str,
            'state': int,
            'company': str,
            'user': User
        }

        self.attribute_map = {
            'id': 'id',
            'id_number': 'id_number',
            'state': 'state',
            'company': 'company',
            'user': 'user'
        }
        self._id = id
        self._id_number = id_number
        self._state = state
        self._company = company
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'ProspectWithUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProspectWithUser of this ProspectWithUser.  # noqa: E501
        :rtype: ProspectWithUser
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this ProspectWithUser.


        :return: The id of this ProspectWithUser.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ProspectWithUser.


        :param id: The id of this ProspectWithUser.
        :type id: int
        """

        self._id = id

    @property
    def id_number(self) -> str:
        """Gets the id_number of this ProspectWithUser.


        :return: The id_number of this ProspectWithUser.
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number: str):
        """Sets the id_number of this ProspectWithUser.


        :param id_number: The id_number of this ProspectWithUser.
        :type id_number: str
        """

        self._id_number = id_number

    @property
    def state(self) -> int:
        """Gets the state of this ProspectWithUser.


        :return: The state of this ProspectWithUser.
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state: int):
        """Sets the state of this ProspectWithUser.


        :param state: The state of this ProspectWithUser.
        :type state: int
        """

        self._state = state

    @property
    def company(self) -> str:
        """Gets the company of this ProspectWithUser.

        Name of the company associated with the prospect  # noqa: E501

        :return: The company of this ProspectWithUser.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company: str):
        """Sets the company of this ProspectWithUser.

        Name of the company associated with the prospect  # noqa: E501

        :param company: The company of this ProspectWithUser.
        :type company: str
        """

        self._company = company

    @property
    def user(self) -> User:
        """Gets the user of this ProspectWithUser.


        :return: The user of this ProspectWithUser.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user: User):
        """Sets the user of this ProspectWithUser.


        :param user: The user of this ProspectWithUser.
        :type user: User
        """

        self._user = user
